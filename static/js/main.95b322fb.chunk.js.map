{"version":3,"sources":["components/App/App.js","index.js"],"names":["TodoItem","todo","todos","setTodos","Todo","styled","div","TodoInput","input","TodoCheckInput","CancelButton","inputEl","useRef","handleChangeStatus","status","map","data","id","defaultChecked","onClick","e","target","checked","type","ref","defaultValue","task","onChange","console","log","onBlur","current","value","filter","App","Root","StatusButtonsList","StatusButton","props","$active","Title","Submit","TodoList","FunctionButtonsList","FunctionButton","useState","nowStatus","setNowStatus","setId","todoData","JSON","parse","localStorage","getItem","length","placeholder","onKeyDown","key","alert","window","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95b322fb.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nfunction TodoItem({ todo, todos, setTodos }) {\n  const Todo = styled.div`\n    width: 100%;\n    padding: 10px 5px;\n    cursor: pointer;\n    display: block;\n    position: relative;\n\n    &:hover {\n      background-color: #ffffff;\n    }\n  `;\n\n  const TodoInput = styled.input`\n    font-size: 20px;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n    width: 80%;\n    color: #4a90e2;\n\n    &:focus {\n      outline: none;\n    }\n  `;\n  const TodoCheckInput = styled.input`\n    color: #4a90e2;\n    border: 1px #4a90e2 solid;\n  `;\n\n  const CancelButton = styled.div`\n    font-size: 30px;\n    position: absolute;\n    padding: 0px 15px;\n    right: 20px;\n    bottom: 5px;\n    cursor: pointer;\n  `;\n\n  const inputEl = useRef(null);\n  function handleChangeStatus(status) {\n    return setTodos(\n      todos.map((data) => {\n        if (data.id !== todo.id) {\n          return data;\n        }\n        return {\n          ...data,\n          status,\n        };\n      })\n    );\n  }\n\n  function handleChangeTask(task) {\n    return setTodos(\n      todos.map((data) => {\n        if (data.id !== todo.id) {\n          return data;\n        }\n        return {\n          ...data,\n          task,\n        };\n      })\n    );\n  }\n\n  return (\n    <Todo>\n      <TodoCheckInput\n        defaultChecked={todo.status === \"completed\"}\n        onClick={(e) => {\n          if (e.target.checked) {\n            handleChangeStatus(\"completed\");\n            return;\n          }\n          handleChangeStatus(\"in-progress\");\n          return;\n        }}\n        type=\"checkbox\"\n      />\n      <TodoInput\n        ref={inputEl}\n        defaultValue={todo.task}\n        onChange={(e) => {\n          console.log(\"changing\");\n        }}\n        onBlur={(e) => handleChangeTask(inputEl.current.value)}\n      />\n      <CancelButton\n        onClick={() => {\n          setTodos(todos.filter((data) => data.id !== todo.id));\n        }}\n      >\n        x\n      </CancelButton>\n    </Todo>\n  );\n}\n\nfunction App() {\n  const Root = styled.div`\n    width: 60%;\n    padding: 30px;\n    box-shadow: 0 4px 4px 0 #c8c8c8;\n    background-color: #fff2dc;\n    margin: 0px auto;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -60%);\n  `;\n\n  const StatusButtonsList = styled.div`\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 10px;\n  `;\n\n  const StatusButton = styled.div`\n    padding: 0px 10px;\n    cursor: pointer;\n    /* background-color: white; */\n    color: #4a90e2;\n    border-radius: 5px;\n    transition: 0.5s;\n\n    &:hover {\n      transform: scale(1.15);\n    }\n\n    ${(props) =>\n      props.$active &&\n      `\n      background: rgba(0, 0, 0, 0.03);\n      border-bottom: solid 1px rgba(0, 0, 0, 0.2);\n    `}\n  `;\n\n  const Title = styled.div`\n    font-size: 54px;\n    color: #4a90e2;\n    text-align: center;\n    margin-bottom: 20px;\n  `;\n  const Submit = styled.input`\n    margin-bottom: 30px;\n    width: 80%;\n    padding: 10px 15px;\n    font-size: 18px;\n    transform: translate(0%, 0);\n    border: none;\n    background-color: #fff2dc;\n    transition-property: width;\n    width: 85%;\n    margin: 0;\n    transition: 0.5s;\n\n    &:focus {\n      outline: none;\n      border-bottom: 2px solid #4a90e2;\n      transition-property: width;\n      width: 95%;\n      transition: 0.5s;\n    }\n  `;\n\n  const TodoList = styled.div`\n    top: 50%;\n    width: 100%;\n    color: #4a90e2;\n    margin-top: 30px;\n  `;\n\n  const FunctionButtonsList = styled.div`\n    margin-top: 40px;\n    display: flex;\n    justify-content: space-between;\n  `;\n\n  const FunctionButton = styled.div`\n    padding: 1px 5px;\n    cursor: pointer;\n    color: white;\n    border-radius: 5px;\n    transition: 0.5s;\n    background-color: #dd0000;\n    border: 1px solid #dd0000;\n\n    &:hover {\n      transform: scale(1.15);\n    }\n  `;\n\n  function writeTodoToLocalStorage(todo) {\n    window.localStorage.setItem(\"todos\", JSON.stringify(todo));\n  }\n\n  const [nowStatus, setNowStatus] = useState(\"all\");\n  const [id, setId] = useState(1);\n\n  const [todos, setTodos] = useState(() => {\n    let todoData = JSON.parse(localStorage.getItem(\"todos\")) || \"\";\n    if (todoData != false) {\n      setId(todoData[todoData.length - 1].id + 1);\n      return todoData;\n    }\n\n    todoData = [];\n    setId(1);\n\n    return todoData;\n  });\n\n  return (\n    <Root>\n      <StatusButtonsList>\n        <StatusButton\n          $active={nowStatus === \"all\"}\n          onClick={() => {\n            setNowStatus(\"all\");\n          }}\n        >\n          My Tasks\n        </StatusButton>\n        <StatusButton\n          $active={nowStatus === \"in-progress\"}\n          onClick={() => {\n            setNowStatus(\"in-progress\");\n          }}\n        >\n          In Progress\n        </StatusButton>\n        <StatusButton\n          $active={nowStatus === \"completed\"}\n          onClick={() => {\n            setNowStatus(\"completed\");\n          }}\n        >\n          Completed\n        </StatusButton>\n      </StatusButtonsList>\n      <Title>Todo List</Title>\n      <Submit\n        type=\"text\"\n        placeholder=\"Add somethig to do here !\"\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            setTodos([\n              ...todos,\n              {\n                id,\n                status: \"in-progress\",\n                task: e.target.value,\n              },\n            ]);\n            setId(id + 1);\n          }\n        }}\n      />\n      <TodoList>\n        {nowStatus === \"all\" &&\n          todos\n            .filter(\n              (todo) =>\n                todo.status === \"in-progress\" || todo.status === \"completed\"\n            )\n            .map((todo) => (\n              <TodoItem todos={todos} setTodos={setTodos} todo={todo} />\n            ))}\n\n        {nowStatus !== \"all\" &&\n          todos\n            .filter((todo) => todo.status === nowStatus)\n            .map((todo) => (\n              <TodoItem todos={todos} setTodos={setTodos} todo={todo} />\n            ))}\n      </TodoList>\n      <FunctionButtonsList>\n        <FunctionButton\n          onClick={() => {\n            setTodos([]);\n          }}\n        >\n          Clear All Tasks\n        </FunctionButton>\n        <FunctionButton\n          onClick={() => {\n            alert(\"儲存成功！\");\n            writeTodoToLocalStorage(todos);\n          }}\n        >\n          Save\n        </FunctionButton>\n      </FunctionButtonsList>\n    </Root>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}